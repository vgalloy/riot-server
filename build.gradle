plugins {
    id 'org.springframework.boot' version "1.5.2.RELEASE" apply false
    // dependencyUpdates
    id 'com.github.ben-manes.versions' version '0.14.0'
}

ext {
    javaVersion = '1.8'
    findbugsVersion = '3.0.1'
    checkstyleVersion = '7.5'

    junitVersion = '4.12'
    riotApiJavaVersion = '3.11.0'
    slf4jApi = '1.7.25'
    logbackClassicVersion = '1.2.2'
    mongoJavaDriverVersion = '3.4.2'
    mongoJackVersion = '2.6.1'
    flapdoodleEmbedMongoVersion = '2.0.0'
    commonsConfiguration2Version = '2.1.1'
    commonsBeanutilsVersion = '1.9.3'
    javaOverRabbitmqVersion = '1.3.0'
    springBootVersion = '1.5.2.RELEASE'
    springfoxSwaggerVersion = '2.6.1'
}

class TimingsListener implements TaskExecutionListener, BuildListener {
    private org.gradle.util.Clock clock
    private timings = []

    @Override
    void beforeExecute(Task task) {
        clock = new org.gradle.util.Clock()
    }

    @Override
    void afterExecute(Task task, TaskState taskState) {
        def ms = clock.timeInMs
        timings.add([ms, task.path])
    }

    @Override
    void buildFinished(BuildResult result) {
        println "Task timings:"
        for (timing in timings) {
            if (timing[0] >= 50) {
                printf "%7sms  %s\n", timing
            }
        }
    }

    @Override
    void buildStarted(Gradle gradle) {}

    @Override
    void projectsEvaluated(Gradle gradle) {}

    @Override
    void projectsLoaded(Gradle gradle) {}

    @Override
    void settingsEvaluated(Settings settings) {}
}

gradle.addListener new TimingsListener()

allprojects {
    apply plugin: 'java-library'
    apply plugin: 'checkstyle'
    apply plugin: 'pmd'
    apply plugin: 'findbugs'

    sourceCompatibility = "$javaVersion"
    targetCompatibility = "$javaVersion"
    group = 'vgalloy'
    version = '1.0-SNAPSHOT'

    repositories {
        mavenLocal()
        mavenCentral()
    }

    checkstyle {
        toolVersion = "$checkstyleVersion"
        configFile = rootProject.file('config/checkstyle/checkstyle.xml')
        checkstyleTest.enabled = false
    }

    pmd {
        consoleOutput = true
        ruleSetFiles = rootProject.files('config/pmd/ruleset.xml')
        pmdTest.enabled = false
    }

    findbugs {
        toolVersion = "$findbugsVersion"
        excludeFilter = file("$rootProject.projectDir/config/findbugs/findbugs-exception-filter.xml")
        findbugsTest.enabled = false
    }

    test {
        //      testLogging {
        //          events "passed", "skipped", "failed", "standardOut", "standardError"
        //      }
    }
}

project(':riot-server-core') {
    dependencies {
        compile "org.slf4j:slf4j-api:$slf4jApi"
        compile "ch.qos.logback:logback-classic:$logbackClassicVersion"
        compile "org.apache.commons:commons-configuration2:$commonsConfiguration2Version"
        compile "commons-beanutils:commons-beanutils:$commonsBeanutilsVersion"
    }
}

project(':riot-server-dao') {
    dependencies {
        compile project(':riot-server-core')
        compile "vgalloy:riot-api-java:$riotApiJavaVersion"
        compile "org.mongodb:mongo-java-driver:$mongoJavaDriverVersion"
        compile "org.mongojack:mongojack:$mongoJackVersion"
        testCompile "de.flapdoodle.embed:de.flapdoodle.embed.mongo:$flapdoodleEmbedMongoVersion"
        testCompile "junit:junit:$junitVersion"
    }
}

project(':riot-server-loader') {
    dependencies {
        compile project(':riot-server-dao')
        compile "vgalloy:java-over-rabbitmq:$javaOverRabbitmqVersion"
    }
}

project(':riot-server-service') {
    dependencies {
        compile project(':riot-server-loader')
    }
}

project(':riot-server-webservice') {
    apply plugin: 'org.springframework.boot'

    configurations {
        jar.archiveName = '3csminute-server.jar'
    }

    dependencies {
        compile project(':riot-server-service')
        compile "org.springframework.boot:spring-boot-starter-web:$springBootVersion"
        compile "io.springfox:springfox-swagger-ui:$springfoxSwaggerVersion"
        compile "io.springfox:springfox-swagger2:$springfoxSwaggerVersion"
        testCompile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
    }
}